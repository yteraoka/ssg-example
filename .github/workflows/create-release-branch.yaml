name: "[手動]リリースブランチの作成"

# - リリースブランチを作成して
# - main ブランチへの Pull Request を作成し
# - Staging 環境へ Deploy する

on:
  # 手動実行
  workflow_dispatch:

jobs:
  create-release-branch:
    name: リリースブランチの作成

    runs-on: ubuntu-20.04

    outputs:
      release-branch-name: ${{ steps.release-branch-name.outputs.value }}

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          ref: develop

      - name: Generate branch name
        id: release-branch-name
        run: echo "::set-output name=value::release/$(date +%Y%m%d)"
        env:
          TZ: Asia/Tokyo

      - name: リリースブランチの作成とPush
        run: |
          git checkout -b ${{ steps.release-branch-name.outputs.value }}
          git push origin ${{ steps.release-branch-name.outputs.value }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-pull-request:
    name: Pull Request の作成

    needs:
      - create-release-branch

    permissions:
      contents: read
      id-token: write
      pull-requests: write

    runs-on: ubuntu-20.04

    outputs:
      pr-number: ${{ steps.pr-info.outputs.pr-number }}

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ needs.create-release-branch.outputs.release-branch-name }}

      - name: latest tag
        id: latest-tag
        run: |
          latest_tag=$(git tag | grep -E 'v[0-9]+\.[0-9]+\.[0-9]+' | sort -V | tail -n 1)
          echo ::set-output name=value::${latest_tag}

      # 最新の tag を取得
      - name: Get current version
        id: current-version
        run: |
          current_version=$(git tag | grep -E '^v[0-9]' | sort --version-sort | tail -n 1)
          #current_version=$(cat version.txt)
          #current_version=$(jq -r .version ./mysite/package.json)
          echo ::set-output name=value::${current_version}

      - name: Set up Ruby 3.1
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1

      - name: Execute git-pr-release
        run: |
          gem install -N git-pr-release -v 2.1.1
          git-pr-release --no-fetch || true
        env:
          GIT_PR_RELEASE_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_PR_RELEASE_BRANCH_PRODUCTION: main
          GIT_PR_RELEASE_BRANCH_STAGING: ${{ needs.create-release-branch.outputs.release-branch-name }}
          GIT_PR_RELEASE_TEMPLATE: '.github/git-pr-release-template.erb'
          CURRENT_VERSION: ${{ steps.current-version.outputs.value }}
          TZ: Asia/Tokyo

      # release branch から main branch への Pull Request の id, url を取得
      - name: Get Pull Request URL
        id: pr-info
        run: |
          pr_number=$(gh pr list --json number,headRefName,baseRefName,url --state open | jq '.[] | select(.headRefName == "${{ needs.create-release-branch.outputs.release-branch-name }}" and .baseRefName == "main") | .number' -r)
          pr_url=$(gh pr list --json number,headRefName,baseRefName,url --state open | jq '.[] | select(.headRefName == "${{ needs.create-release-branch.outputs.release-branch-name }}" and .baseRefName == "main") | .url' -r)
          echo "::set-output name=pr-number::${pr_number}"
          echo "::set-output name=pr-url::${pr_url}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Slack へ通知
        uses: slackapi/slack-github-action@v1.19.0
        with:
          payload: |
            {
              "text": "Release 用 Pull Request が作成されました\n${{ steps.pr-info.outputs.pr-url }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Release 用 <${{ steps.pr-info.outputs.pr-url }}|Pull Request #${{ steps.pr-info.outputs.pr-number }}> が作成されました。"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  deploy-staging:
    name: Staging への deploy

    needs:
      - create-release-branch
      - create-pull-request

    permissions:
      contents: read
      id-token: write
      pull-requests: write

    runs-on: ubuntu-20.04

    env:
      GCP_WORKLOAD_IDENTITY_PROVIDER: projects/181168524791/locations/global/workloadIdentityPools/ssg-example/providers/gh-ssg-example
      GCP_SERVICE_ACCOUNT: gha-ssg-example@teraoka-test-331901.iam.gserviceaccount.com
      BUCKET_NAME: ssg-example-staging-n9k0

    steps:
      - uses: ./.github/workflows/reusable-deploy.yaml
        with:
          checkout_ref: ${{ needs.create-release-branch.outputs.release-branch-name }}
          workload-identity-provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service-account: ${{ env.GCP_SERVICE_ACCOUNT }}
          bucket-name: ${{ env.BUCKET_NAME }}

      - name: Add URL to summary
        run: |
          echo "### デプロイしました! :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "https://storage.googleapis.com/${BUCKET_NAME}/" >> $GITHUB_STEP_SUMMARY

      - name: URL を書き込む既存のコメントを検索
        uses: peter-evans/find-comment@v2
        id: fc
        with:
          issue-number: ${{ needs.create-pull-request.outputs.pr-number }}
          comment-author: 'github-actions[bot]'
          body-includes: Staging 環境にデプロイしました

      - name: Pull Request のコメントに URL を追加
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ needs.create-pull-request.outputs.pr-number }}
          edit-mode: replace
          body: |
            Staging 環境にデプロイしました
            https://storage.googleapis.com/${{ env.BUCKET_NAME }}/
